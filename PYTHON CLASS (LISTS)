###### DEFINING LISTS ######
friends = ['omer', 'ali', 'ayse', 'mahmut', 2+2]
print(friends)

###### DEFINING LISTS #####
friends2 = ['omer', 'ali', ['omer', 2, 'molly'],'ayse', 'mahmut', 2+2]
print(friends2)
print(friends2[0])
print(friends2[2])

#### FOR LOOP IN A LIST ######

for i in friends2:
    print('Merhaba', i )

####### CHANGING AND ITEM IN A LIST ####

friends2[0] = 'Omer'
print(friends2)

lotto = [1, 34, 56, 67, 89, 23]
print(lotto)
lotto[3] = 66
print(lotto)

###### LIST CONCATENATION ######
    
friends2 = ['omer', 'ali', ['omer', 2, 'molly'],'ayse', 'mahmut', 2+2]
lotto = [1, 34, 56, 67, 89, 23]

conc = friends2 + lotto
print(conc)

######### LIST SLICING#######

lotto[1:4]
print(lotto)

print(conc [0:])
print(conc [:4]) ## UPTO not including
print(conc [4:])

##### LIST METHODS ######
x = list()
print(type(x))
print(dir(x))
#### ['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', 
'__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', 
'__getattribute__', '__getitem__', '__getstate__', '__gt__',
'__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__',
'__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__',
'__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', 
'__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', 
'__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend',
'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] ####


###### SAMPLE INFINITE LOOPS

while True:
    print("This is an infinite loop!")

while True:
    user_input = input("Enter something: ")
    print(f"You entered: {user_input}")

count = 0
while count < 10:
    print("This loop will run forever because the condition 'count < 10' is always true.")
    # Incrementing count is missing, so it stays 0, and the loop condition is always true.

while True:
    user_input = input("Enter 'q' to quit: ")
    if user_input.lower() == 'q':
        print("Exiting the loop.")
        break
    else:
        print(f"You entered: {user_input}")

##### COUNT CONTROLLED LOOPS
counter = 1
while counter < 10:
    print(counter)
    counter = counter + 1

### NEVER ENDS BECAUSE NEVER MORE THAN 10


i = 0
total = 0
while total < 10:
    total = total - 2
    i = i + 1
    print (total , i)
    

###### EVENT CONTROLLED LOOPS

initial_balance = 10000
target = initial_balance * 2
year = 0
rate = 1.05

while initial_balance < target:
    initial_balance = initial_balance * rate
    year = year + 1
    print('Year:', year, 'Balance:', initial_balance)
### Off-by-One Errors

#### AVERAGE LOOPS
total = 0.0
count = 0
inputStr = input("Enter value: ") 
while inputStr != " " :
    value = float(inputStr)
    total = total + value
    count = count + 1
    inputStr = input("Enter value: ")
if count > 0 :
   average = total / count
else :
    average = 0.0
print('average is:', average)

#### SUM LOOP 
total = 0.0
inputStr = input("Enter value: ") 
while inputStr != " " :
   value = float(inputStr)
   total = total + value
   inputStr = input("Enter value: ")
print('Total is:', total)

##### COUNTING MATCHES

negatives = 0
inputStr = input("Enter value: ") 
while inputStr != "" :
   value = int(inputStr)
   if value < 0 :
      negatives = negatives + 1
   inputStr = input("Enter value: ")
print("There were", negatives,
"negative values.")

#####  FINDING THE MATCHING ONE

valid = False
while not valid :
   value = int(input("Please enter a positive value < 100: "))
   if value > 0 and value < 100 :
      valid = True
      print('Now you re talking')
   else :
      print("Invalid input.")


#### FINDING THE MAXIMUM

largest = int(input("Enter a value: "))
inputStr = input("Enter a value: ")
while inputStr != " " :
    value = int(inputStr) 
    if value > largest :
        largest = value
        #print('So far largest:', largest)
    print('So far largest:', largest)
    inputStr = input("Enter a value: ")



##### FINDING THE MINIMUM

smallest = float(input("Enter a value: "))
inputStr = input("Enter a value: ")
while inputStr != " " :
    value = float(inputStr) 
    if value < smallest :
        smallest = value
        #print('So farsmallest:', smallest)
    print('So far largest:', smallest)
    inputStr = input("Enter a value: ")


##### With a key word
smallest = float(input("Enter a value: "))
inputStr = input("Enter a value: ")
while inputStr != "result please" :
    value = float(inputStr) 
    if value < smallest :
        smallest = value
        #print('So farsmallest:', smallest)
    print('So far smallest:', smallest)
    inputStr = input("Enter a value: ")
print('So far largest:', smallest)

##### FOR LOOP 

stateName = "Virginia"
i = 0
while i < len(stateName) :
   letter = stateName[i]
   print(letter) 
   i = i +1
   
stateName = "Virginia" 
for letter in stateName :
    print(letter)

##### 
 Planning:
• Decide what work to do inside the loop
• Specify the loop condition
• Determinelooptype
• Setup variables before the first loop
• Process results when the loop is finished
• Trace the loop with typical examples
 Coding:
• Implement the loop in Python

##### A SPECIAL USE OF PRINT (END = "")
print('00', end="")
print(3+4)


##### POWERTABLE

NMAX = 10
XMAX = 10
for n in range(1, NMAX+1):
    print("%10d" % n, end = "")
print()

for n in range(1, NMAX + 1):
    print("%10s" % "x ", end = "" )
    
print("\n", "   ", "-" * 35)

#print table body

for x in range (1, XMAX + 1) :
    # print the X row in the table
    for n in range (1, NMAX + 1):
        print("%10.0f" % x ** n, end = "")
    print()

 1         2         3         4         5         6         7         8         9        10
        x         x         x         x         x         x         x         x         x         x 
     -----------------------------------
         1         1         1         1         1         1         1         1         1         1
         2         4         8        16        32        64       128       256       512      1024
         3         9        27        81       243       729      2187      6561     19683     59049
         4        16        64       256      1024      4096     16384     65536    262144   1048576
         5        25       125       625      3125     15625     78125    390625   1953125   9765625
         6        36       216      1296      7776     46656    279936   1679616  10077696  60466176
         7        49       343      2401     16807    117649    823543   5764801  40353607 282475249
         8        64       512      4096     32768    262144   2097152  16777216 1342177281073741824
         9        81       729      6561     59049    531441   4782969  43046721 3874204893486784401
        10       100      1000     10000    100000   1000000  10000000 100000000100000000010000000000


###### A TOOL TO CALCUILATE AVERAGE OF STUDENTS
# Obtain number of exams students have
NumExams = int(input('How many exam results does each student have?'))

# Initialize MoreGrades to a non-sentinal value
MoreGrades = "Y"

# Compute average exam grades until the user wants to stop
while MoreGrades == "Y":
    print('Enter the exam grades')
    total = 0
    for i in range(1, NumExams + 1):
        score = int (input("Exam %d: " % i))
        total = total + score

    average = total / NumExams
    print ('the average is %.2f' % average)
    
    MoreGrades = input("Enter  exam grader for another student (Y/N)? ")
    MoreGrades = MoreGrades.upper()


##### STRING PROCESSING

##### COUNTING MATCHES

string = 'Kom KHI njgh K KKO JHBJH MKKINKN'
uppercase = 0
for char in string :
   if char.isupper() :
      uppercase = uppercase + 1
print(uppercase)

####  COUNTING VOWELS
word = 'omer incialan bugun bu yaziyi yaziyor'
vowels = 0
for char in word :
    if char.lower() in "aeiou" : 
        vowels = vowels + 1
print(vowels)

###### FINDING ALL MATCHES
sentence = input("Enter a sentence: ")
for i in range(len(sentence)) :
    if sentence[i].isupper() : 
        print(i)

#### FINDING A DIGIT IN THE SENTENCE

string = ' DENEME -2 '
found = False
position = 0
while not found and position < len(string) :
   if string[position].isdigit() :
      found = True
   else :
      position = position + 1
if found :
   print("First digit occurs at position", position)
else :
    print("The string does not contain a digit.")

##### FINDING THE LAST DIGIT IN A STRING

string = ' jjfd 9d euu4 4747grfb 93ufwosrvsrgsrv 4 erkgnr'
found = False
position = len(string) - 1
while not found and position >= 0 :
   if string[position].isdigit() :
      found = True
   else :
      position = position - 1
print(position)

##### VALIDATING THE FORMAT
In the United States, telephone numbers consist of 
three parts––area code exchange, and line number–
–which are commonly specified in the form (###)###-####.


string = '(341)-777-6962'
valid = len(string) == 13
position = 0

while valid and position < len(string):
    if (position == 0 and string[position] != "(") or \
       (position == 4 and string[position] != ")") or \
       (position == 8 and string[position] != "-") or \
       (position != 0 and position != 4 and position != 8 and not string[position].isdigit()):
        valid = False
    position = position + 1

if valid:
    print("The phone number format is valid.")
else:
    print("The phone number format is invalid.")


#### RANDOM NUMBER GENERATOR

from random import randint
for i in range(10):
    d1 = randint(1,6)
    d2 = randint(1,6)
print(d1, d2)












